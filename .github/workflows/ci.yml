name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run contract tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.1', '8.2', '8.3', '8.4']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --ignore-platform-reqs

    - name: Validate composer.json
      run: composer validate

    - name: Debug PHP version and extensions
      run: |
        php --version
        php -m

    - name: Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff --allow-risky=yes

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse

    - name: Run Psalm
      run: vendor/bin/psalm

    - name: Run PHPUnit (Unit & Integration Tests)
      run: vendor/bin/phpunit --testsuite=Unit,Integration

    - name: Run PHPUnit with Coverage (PHP 8.4 only)
      if: matrix.php-version == '8.4'
      run: vendor/bin/phpunit --testsuite=Unit,Integration --coverage-clover=coverage.xml

    - name: Upload coverage reports to Codecov
      if: matrix.php-version == '8.4'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  contract-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.3-composer-${{ hashFiles('**/composer.lock') }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --ignore-platform-reqs

    - name: Run Contract Tests
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        if [ -n "$TMDB_API_KEY" ] && [ "$TMDB_API_KEY" != "your-tmdb-api-key-here" ]; then
          echo "Running contract tests with API key..."
          vendor/bin/phpunit --testsuite=Contract
        else
          echo "TMDB_API_KEY not set or is placeholder, skipping contract tests"
          echo "Please add a valid TMDB_API_KEY secret to your GitHub repository"
        fi

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ All quality checks passed"
          exit 0
        else
          echo "❌ Quality checks failed:"
          echo "  - Test result: ${{ needs.test.result }}"
          echo "  - Security result: ${{ needs.security.result }}"
          exit 1
        fi
